AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  SAM Template to create a Lambda Function, an S3 Bucket with a custom resource prefix, 
  a DynamoDB table, and an additional Lambda for processing ZIP files.

Parameters:
  ResourcePrefix:
    Type: String
    Default: "factored-hackaton-2024-unlock"
    Description: Prefix for the resource names

Globals:
  Function:
    Runtime: python3.12
    Handler: app.lambda_handler
    Architectures:
    - arm64
    Timeout: 60

Resources:
  # Definition of the Lambda Function for downloading and storing metadata
  DownloaderLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: python3.12
      CodeUri: ./data-engineering/raw/downloader/
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          RAW_DATA_BUCKET_NAME: !Sub '${ResourcePrefix}-rawdata-bucket'
      FunctionName: !Sub '${ResourcePrefix}-downloader-lambda'
      Policies:
        - S3WritePolicy:
            BucketName: !Sub '${ResourcePrefix}-rawdata-bucket'
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(30 11 * * ? *)  # 6:30 AM EST (11:30 AM UTC)
      FunctionUrlConfig:
        AuthType: NONE
        Cors:
            AllowOrigins:
                - "*"

  # Definition of the Lambda Function for processing ZIP files
  ZipProcessorLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: python3.12
      CodeUri: ./data-engineering/raw/zip_processor/
      MemorySize: 256
      Timeout: 60
      Environment:
        Variables:
          UNZIPPED_BUCKET_NAME: !Sub '${ResourcePrefix}-unzipped-bucket'
      FunctionName: !Sub '${ResourcePrefix}-zip-processor-lambda'
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub '${ResourcePrefix}-rawdata-bucket'
        - S3WritePolicy:
            BucketName: !Sub '${ResourcePrefix}-unzipped-bucket'

  # Permission for S3 to invoke the ZipProcessorLambda
  ZipProcessorPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref ZipProcessorLambda
      Action: 'lambda:InvokeFunction'
      Principal: 's3.amazonaws.com'
      SourceArn: !Sub 'arn:aws:s3:::${ResourcePrefix}-rawdata-bucket'

  # Definition of the S3 Bucket for raw data
  RawData:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${ResourcePrefix}-rawdata-bucket'
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:Put'
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.zip'
            Function: !GetAtt ZipProcessorLambda.Arn


  # Definition of the S3 Bucket for processed data
  UnzippedBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${ResourcePrefix}-unzipped-bucket'

  MedallionBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${ResourcePrefix}-medallion-bucket'

  ArtifactsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${ResourcePrefix}-artifacts-bucket'

# outputs
Outputs:
  LambdaFunctionName:
    Description: Name of the Downloader Lambda Function
    Value: !Ref DownloaderLambda

  S3BucketName:
    Description: Name of the Raw Data S3 Bucket
    Value: !Ref RawData

  ZipProcessorLambdaFunctionName:
    Description: Name of the Zip Processor Lambda Function
    Value: !Ref ZipProcessorLambda

  UnzzipedDataBucketName:
    Description: Name of the Processed Data S3 Bucket
    Value: !Ref UnzippedBucket

  DownloaderLambdaUrl:
    Description: URL to invoke the Downloader Lambda function
    Value:
        Fn::GetAtt: DownloaderLambdaUrl.FunctionUrl